<?php

namespace FormForge\Components;

use Closure;
use Illuminate\Support\Str;
use Illuminate\View\View;

/**
 * Represents a html field to be generated by FormBuilder. It's a base class for more specific types of fields.
 *
 * @author Damian UÅ‚an <damian.ulan@protonmail.com>
 * @copyright 2024
 */
class ForgeComponent
{
    public string $name;

    public string $type;

    public ?string $value = null;

    public ?string $template = null;

    public ?string $label = null;

    public ?string $placeholder = null;

    public array $classes = [];

    public bool $required = false;

    public bool $disabled = false;

    public bool $readonly = false;

    public bool $show = true;

    public string $autocomplete = '';

    public array $infos = [];

    public array $dangers = [];

    /**
     * Renders the html representation of the Component.
     */
    public function render(): View
    {
        $template = $this->template ?? Str::lower((new \ReflectionClass($this))->getShortName());

        return view('formforge::components.' . $template, [
            'component' => $this,
            'classes' => $this->getClasses(),
        ]);
    }

    /**
     * Labels an Component as a required. This is not validation, only invokes visual effect.
     */
    public function required(?Closure $callback = null): static
    {
        $this->required = true;
        if (! is_null($callback)) {
            $this->required = (bool) $callback();
        }

        return $this;
    }

    /**
     * Marks a Component as disabled.
     */
    public function disabled(): static
    {
        $this->disabled = true;

        return $this;
    }

    /**
     * Marks an Component as disabled.
     */
    public function readonly(): static
    {
        $this->readonly = true;

        return $this;
    }

    /**
     * Sets html placeholder.
     */
    public function placeholder(string $text): static
    {
        $this->placeholder = empty($text) ? null : $text;

        return $this;
    }

    /**
     * Sets html default value.
     */
    public function value(string $value): static
    {
        $this->value = $value;

        return $this;
    }

    /**
     * Sets label text for an Component.
     */
    public function label(string|callable $text): static
    {
        if (is_callable($text)) {
            $this->label = call_user_func($text);
        } else {
            $this->label = $text;
        }

        return $this;
    }

    /**
     * Renders input label to html.
     *
     * @return string
     */
    public function getLabel(): ?View
    {
        if (! empty($this->label) && ! empty($this->name)) {
            return view('formforge::components.label', [
                'label' => $this->label,
                'name' => $this->name,
                'required' => $this->required,
            ]);
        }

        return null;
    }

    public function class(...$classes)
    {
        if (! empty($classes)) {
            foreach ($classes as $class) {
                $this->classes[] = $class;
            }
        }

        return $this;
    }

    private function getClasses()
    {
        $this->classes = array_unique($this->classes);

        return empty($this->classes) ? null : implode(' ', $this->classes);
    }

    /**
     * Generates tippy.js tooltip description for the field.
     */
    public function info(string $text): static
    {
        $this->infos[] = $text;

        return $this;
    }

    /**
     * Renders input label to html.
     *
     * @return string
     */
    public function getInfos()
    {
        if (! empty($this->infos)) {
            $output = '';
            foreach ($this->infos as $info) {
                $output .= '<span class="info-box" data-tippy-content="' . $info . '"><i class="bi-info-circle-fill"></i></span>';
            }

            return $output;
        }

        return null;
    }

    /**
     * Sets html autocomplete setting
     */
    public function autocomplete(string $type): static
    {
        $this->autocomplete = $type;

        return $this;
    }

    /**
     * Set additional conditions that need to be met for component to be shown in the form.
     *
     * @param  mixed  $callback
     */
    public function condition($callback): static
    {
        $return = $callback();
        $this->show = (bool) $return;

        return $this;
    }
}
